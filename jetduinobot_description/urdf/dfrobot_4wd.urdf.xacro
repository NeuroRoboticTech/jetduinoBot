<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:property name="chassis_length" value="0.225" />
  <xacro:property name="chassis_width" value="0.185" />
  <xacro:property name="chassis_height" value="0.058" />
  <xacro:property name="chassis_mass" value="0.416" />

  <link name="world_link" />

  <link name="base_link">
    <visual>
      <geometry>
        <mesh filename="package://jetduinobot_description/meshes/chassis.dae" scale="0.1 0.1 0.1"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 -0.0075 -0.029"/>
      <xacro:insert_block name="material_silver" />
    </visual>
    <collision>
      <geometry>
        <box size="${chassis_width} ${chassis_length} ${chassis_height}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${chassis_mass}"/>
      <inertia ixx="${0.0833 * chassis_mass * (chassis_height*chassis_height + chassis_length*chassis_length)}" ixy="0" ixz="0" 
               iyy="${0.0833 * chassis_mass * (chassis_width*chassis_width + chassis_length*chassis_length)}" iyz="0"
               izz="${0.0833 * chassis_mass * (chassis_height*chassis_height + chassis_width*chassis_width)}" />
    </inertial>
  </link>

  <joint name="base_joint" type="fixed">
    <parent link="world_link"/>
    <child link="base_link"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
  </joint>

  <!-- battery -->
  <xacro:property name="battery_length" value="0.13" />
  <xacro:property name="battery_width" value="0.045" />
  <xacro:property name="battery_height" value="0.0025" />
  <xacro:property name="battery_mass" value="0.330" />

  <link name="battery_link">
    <visual>
      <geometry>
        <mesh filename="package://jetduinobot_description/meshes/battery_large/battery_large.dae"/>
      </geometry>
      <xacro:insert_block name="material_black" />
    </visual>
    <collision>
      <geometry>
        <box size="${battery_width} ${battery_length} ${battery_height}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${battery_mass}"/>
      <inertia ixx="${0.0833 * battery_mass * (battery_height*battery_height + battery_length*battery_length)}" ixy="0" ixz="0" 
               iyy="${0.0833 * battery_mass * (battery_width*battery_width + battery_length*battery_length)}" iyz="0"
               izz="${0.0833 * battery_mass * (battery_height*battery_height + battery_width*battery_width)}" />
    </inertial>
  </link>

  <joint name="batteryjoint" type="fixed">
    <parent link="base_link"/>
    <child link="battery_link"/>
    <origin rpy="0 0 1.5708" xyz="0 -0.02 0.015"/>
  </joint>

  <!-- wheels -->
  <xacro:property name="wheel_length" value="0.025" />
  <xacro:property name="wheel_radius" value="0.029" />
  <xacro:property name="wheel_mass" value="0.030" />
  <xacro:property name="wheel_separation" value="0.148" />

  <!-- rear wheels -->
  <!-- right rear wheel -->
  <link name="right_rear_wheel_link">
    <visual>
      <geometry>
        <mesh filename="package://jetduinobot_description/meshes/wheel/wheel.dae" scale="0.1 0.1 0.1"/>
      </geometry>
      <xacro:insert_block name="material_black" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${wheel_length}" radius="${wheel_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${wheel_mass}"/>
      <inertia ixx="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" ixy="0" ixz="0" 
               iyy="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" iyz="0"
               izz="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" />
    </inertial>
  </link>

  <joint name="right_rear_wheel_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="right_rear_wheel_link"/>
    <origin rpy="0 -1.5708 0" xyz="-0.07 -0.0875 -0.017"/>
  </joint>

  <!-- left rear wheel -->
  <link name="left_rear_wheel_link">
    <visual>
      <geometry>
        <mesh filename="package://jetduinobot_description/meshes/wheel/wheel.dae" scale="0.1 0.1 0.1"/>
      </geometry>
      <xacro:insert_block name="material_black" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${wheel_length}" radius="${wheel_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${wheel_mass}"/>
      <inertia ixx="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" ixy="0" ixz="0" 
               iyy="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" iyz="0"
               izz="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" />
    </inertial>
  </link>

  <joint name="left_rear_wheel_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="left_rear_wheel_link"/>
    <origin rpy="0 1.5708 0" xyz="0.07 -0.0875 -0.017"/>
  </joint>


  <!-- front wheels -->
  <!-- right front wheel -->
  <link name="right_front_wheel_link">
    <visual>
      <geometry>
        <mesh filename="package://jetduinobot_description/meshes/wheel/wheel.dae" scale="0.1 0.1 0.1"/>
      </geometry>
      <xacro:insert_block name="material_black" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${wheel_length}" radius="${wheel_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${wheel_mass}"/>
      <inertia ixx="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" ixy="0" ixz="0" 
               iyy="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" iyz="0"
               izz="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" />
    </inertial>
  </link>

  <joint name="right_front_wheel_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="right_front_wheel_link"/>
    <origin rpy="0 -1.5708 0" xyz="-0.07 0.0455 -0.017"/>
  </joint>

  <!-- left front wheel -->
  <link name="left_front_wheel_link">
    <visual>
      <geometry>
        <mesh filename="package://jetduinobot_description/meshes/wheel/wheel.dae" scale="0.1 0.1 0.1"/>
      </geometry>
      <xacro:insert_block name="material_black" />
    </visual>
    <collision>
      <geometry>
        <cylinder length="${wheel_length}" radius="${wheel_radius}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${wheel_mass}"/>
      <inertia ixx="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" ixy="0" ixz="0" 
               iyy="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" iyz="0"
               izz="${0.0833 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_length*wheel_length)}" />
    </inertial>
  </link>

  <joint name="left_front_wheel_joint" type="continuous">
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="left_front_wheel_link"/>
    <origin rpy="0 1.5708 0" xyz="0.07 0.0455 -0.017"/>
  </joint>

  <gazebo>
    <plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
      <leftFrontJoint>left_front_wheel_joint</leftFrontJoint>
      <rightFrontJoint>right_front_wheel_joint</rightFrontJoint>
      <leftRearJoint>left_rear_wheel_joint</leftRearJoint>
      <rightRearJoint>right_rear_wheel_joint</rightRearJoint>
      <wheelSeparation>${wheel_separation}</wheelSeparation>
      <wheelDiameter>${2 * wheel_radius}</wheelDiameter>
      <robotBaseFrame>base_link</robotBaseFrame>
      <torque>20</torque>
    </plugin>
  </gazebo>

</robot>
